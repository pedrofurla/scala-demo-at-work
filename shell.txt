// Inferencia de ;
// Sem `return`

// TUPLES 

scala> val t = ("Um string", 3.14, new java.io.File("dados.txt"))
t: (java.lang.String, Double, java.io.File) = (Um string,3.14,dados.txt)

scala> t._2
res7: Double = 3.14

scala> t._1
res8: java.lang.String = Um string

// Tudo são expressões

scala> def bool2str(x:Boolean) = if(x) "True" else "False"
bool2str: (x: Boolean)java.lang.String 

// Closures / Function as first-class citizens

scala> val string2int : String => Int = (s:String) => Integer.parseInt(s)
string2int: (String) => Int = <function1>

scala> def converter(s:String, s2i:String => Int) = s2i(s)
converter: (s: String,s2i: (String) => Int)Int

scala> converter("123", string2int)
res10: Int = 123

// Type inference !!!

scala> val string2int = (s:String) => Integer.parseInt(s)
string2int: (String) => Int = <function1>

// Currying / Partial application

scala> val string2int  = Integer.parseInt(_:String)
string2int: (String) => Int = <function1>

// Implicit parameters

scala> def converter2(s:String)(implicit s2i:(String => Int)) = s2i(s)
converter2: (s: String)(implicit s2i: (String) => Int)Int

scala> implicit val firstStr2int = (x:String) => string2int(x.charAt(0).toString)
firstStr2int: (String) => Int = <function1>

scala> converter2("321")
res0: Int = 3

scala> converter2("321")(string2int)
res1: Int = 321

// Alias

scala> type FILE = java.io.File
defined type alias FILE

scala> new FILE("aaa")
res2: java.io.File = aaa

scala> import java.io.{File => F}
import java.io.{File => F}

scala> new F("AAA")
res4: java.io.File = AAA

// Imports fáceis
scala> import java.io.{File, FileInputStream => FIS}
import java.io.{File, FileInputStream=>FIS}

scala> new FIS(new File("aaa"))
java.io.FileNotFoundException: aaa (O sistema não pode encontrar o arquivo especificado)

scala> import java.lang.Math
import java.lang.Math

scala> Math.abs(-10)
res14: Int = 10

scala> import java.lang.Math.{PI, tan}
import java.lang.Math.{PI, tan}

scala> tan(PI)
res20: Double = -1.2246467991473532E-16

scala> import java.lang.Math.{abs => absolute, tan => tangente}
import java.lang.Math.{abs=>absolute, tan=>tangente}

scala> absolute(-10)
res19: Int = 10

